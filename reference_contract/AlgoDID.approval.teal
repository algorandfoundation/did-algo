#pragma version 9

// This TEAL was generated by TEALScript v0.51.1
// https://github.com/algorand-devrel/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_UpdateApplication

NOT_IMPLEMENTED:
	err

// startUpload(pay,uint64,uint64,address)void
//
// 
// Allocate boxes to begin data upload process
// 
// @param pubKey The pubkey of the DID
// @param numBoxes The number of boxes that the data will take up
// @param endBoxSize The size of the last box
// @param mbrPayment Payment from the uploader to cover the box MBR
abi_route_startUpload:
	byte 0x; dupn 3 // push empty bytes to fill the stack frame for this subroutine's local variables

	// mbrPayment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// endBoxSize: uint64
	txna ApplicationArgs 3
	btoi

	// numBoxes: uint64
	txna ApplicationArgs 2
	btoi

	// pubKey: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute startUpload(pay,uint64,uint64,address)void
	callsub startUpload
	int 1
	return

startUpload:
	proto 8 0

	// contracts/algo-did.algo.ts:64
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts/algo-did.algo.ts:66
	// startBox = this.currentIndex.value
	byte 0x63757272656e74496e646578 // "currentIndex"
	app_global_get
	frame_bury -5 // startBox: uint64

	// contracts/algo-did.algo.ts:67
	// endBox = startBox + numBoxes - 1
	frame_dig -5 // startBox: uint64
	frame_dig -2 // numBoxes: uint64
	+
	int 1
	-
	frame_bury -6 // endBox: uint64

	// contracts/algo-did.algo.ts:69
	// metadata: Metadata = {
	//       start: startBox, end: endBox, status: UPLOADING, endSize: endBoxSize, lastDeleted: 0,
	//     }
	frame_dig -5 // startBox: uint64
	itob
	frame_dig -6 // endBox: uint64
	itob
	concat
	byte 0x00
	byte 0x00
	bitlen
	int 8
	<=
	assert
	byte 0xFF
	b&
	concat
	frame_dig -3 // endBoxSize: uint64
	itob
	concat
	byte 0x0000000000000000
	concat
	frame_bury -7 // metadata: Metadata

	// contracts/algo-did.algo.ts:73
	// assert(!this.metadata(pubKey).exists)
	frame_dig -1 // pubKey: address
	box_len
	swap
	pop
	!
	assert

	// contracts/algo-did.algo.ts:75
	// this.metadata(pubKey).value = metadata
	frame_dig -1 // pubKey: address
	frame_dig -7 // metadata: Metadata
	box_put

	// contracts/algo-did.algo.ts:77
	// this.currentIndex.value = endBox + 1
	byte 0x63757272656e74496e646578 // "currentIndex"
	frame_dig -6 // endBox: uint64
	int 1
	+
	app_global_put

	// contracts/algo-did.algo.ts:79
	// totalCost = numBoxes * COST_PER_BOX // cost of data boxes
	//     + (numBoxes - 1) * MAX_BOX_SIZE * COST_PER_BYTE // cost of data
	//     + numBoxes * 8 * COST_PER_BYTE // cost of data keys
	//     + endBoxSize * COST_PER_BYTE // cost of last data box
	//     + COST_PER_BOX + (8 + 8 + 1 + 8 + 32 + 8) * COST_PER_BYTE
	frame_dig -2 // numBoxes: uint64
	int 2500
	*
	frame_dig -2 // numBoxes: uint64
	int 1
	-
	int 32768
	*
	int 400
	*
	+
	frame_dig -2 // numBoxes: uint64
	int 8
	*
	int 400
	*
	+
	frame_dig -3 // endBoxSize: uint64
	int 400
	*
	+
	int 2500
	+
	int 26000
	+
	frame_bury -8 // totalCost: uint64

	// contracts/algo-did.algo.ts:85
	// assert(mbrPayment.amount === totalCost)
	frame_dig -4 // mbrPayment: pay
	gtxns Amount
	frame_dig -8 // totalCost: uint64
	==
	assert

	// contracts/algo-did.algo.ts:86
	// assert(mbrPayment.receiver === this.app.address)
	frame_dig -4 // mbrPayment: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert
	retsub

// upload(bytes,uint64,uint64,address)void
//
// 
// Upload data to a specific offset in a box
// 
// @param pubKey The pubkey of the DID
// @param boxIndex The index of the box to upload the given chunk of data to
// @param offset The offset within the box to start writing the data
// @param data The data to write
abi_route_upload:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// data: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// offset: uint64
	txna ApplicationArgs 3
	btoi

	// boxIndex: uint64
	txna ApplicationArgs 2
	btoi

	// pubKey: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute upload(bytes,uint64,uint64,address)void
	callsub upload
	int 1
	return

upload:
	proto 5 0

	// contracts/algo-did.algo.ts:99
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts/algo-did.algo.ts:101
	// metadata = this.metadata(pubKey).value
	frame_dig -1 // pubKey: address
	frame_bury -5 // storage key//metadata

	// contracts/algo-did.algo.ts:102
	// assert(metadata.status === UPLOADING)
	frame_dig -5 // storage key//metadata
	box_get
	assert
	extract 16 1
	byte 0x0000000000000000
	b==
	assert

	// contracts/algo-did.algo.ts:103
	// assert(metadata.start <= boxIndex && boxIndex <= metadata.end)
	frame_dig -5 // storage key//metadata
	box_get
	assert
	extract 0 8
	btoi
	frame_dig -2 // boxIndex: uint64
	<=
	dup
	bz skip_and0
	frame_dig -2 // boxIndex: uint64
	frame_dig -5 // storage key//metadata
	box_get
	assert
	extract 8 8
	btoi
	<=
	&&

skip_and0:
	assert

	// if0_condition
	// contracts/algo-did.algo.ts:105
	// offset === 0
	frame_dig -3 // offset: uint64
	int 0
	==
	bz if0_end

	// if0_consequent
	// contracts/algo-did.algo.ts:106
	// this.dataBoxes(boxIndex).create(boxIndex === metadata.end ? metadata.endSize : MAX_BOX_SIZE)
	frame_dig -2 // boxIndex: uint64
	itob
	frame_dig -2 // boxIndex: uint64
	frame_dig -5 // storage key//metadata
	box_get
	assert
	extract 8 8
	btoi
	==
	bz ternary0_false
	frame_dig -5 // storage key//metadata
	box_get
	assert
	extract 17 8
	btoi
	b ternary0_end

ternary0_false:
	int 32768

ternary0_end:
	box_create

if0_end:
	// contracts/algo-did.algo.ts:109
	// this.dataBoxes(boxIndex).replace(offset, data)
	frame_dig -2 // boxIndex: uint64
	itob
	frame_dig -3 // offset: uint64
	frame_dig -4 // data: bytes
	box_replace
	retsub

// finishUpload(address)void
//
// 
// Mark uploading as false
// 
// @param pubKey The address of the DID
abi_route_finishUpload:
	// pubKey: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute finishUpload(address)void
	callsub finishUpload
	int 1
	return

finishUpload:
	proto 1 0

	// contracts/algo-did.algo.ts:119
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts/algo-did.algo.ts:121
	// this.metadata(pubKey).value.status = READY
	frame_dig -1 // pubKey: address
	int 16
	byte 0x01
	box_replace
	retsub

// startDelete(address)void
//
// Starts the deletion process for the data associated with a DID
// 
// @param pubKey The address of the DID
abi_route_startDelete:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// pubKey: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute startDelete(address)void
	callsub startDelete
	int 1
	return

startDelete:
	proto 2 0

	// contracts/algo-did.algo.ts:130
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts/algo-did.algo.ts:132
	// metadata = this.metadata(pubKey).value
	frame_dig -1 // pubKey: address
	frame_bury -2 // storage key//metadata

	// contracts/algo-did.algo.ts:133
	// assert(metadata.status === READY)
	frame_dig -2 // storage key//metadata
	box_get
	assert
	extract 16 1
	byte 0x0000000000000001
	b==
	assert

	// contracts/algo-did.algo.ts:135
	// metadata.status = DELETING
	frame_dig -2 // storage key//metadata
	box_get
	assert
	byte 0x02
	replace2 16
	frame_dig -2 // storage key//metadata
	swap
	box_put
	retsub

// deleteData(uint64,address)void
//
// Deletes a box of data
// 
// @param pubKey The address of the DID
// @param boxIndex The index of the box to delete
abi_route_deleteData:
	byte 0x; dup // push empty bytes to fill the stack frame for this subroutine's local variables

	// boxIndex: uint64
	txna ApplicationArgs 2
	btoi

	// pubKey: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute deleteData(uint64,address)void
	callsub deleteData
	int 1
	return

deleteData:
	proto 4 0

	// contracts/algo-did.algo.ts:145
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts/algo-did.algo.ts:147
	// metadata = this.metadata(pubKey).value
	frame_dig -1 // pubKey: address
	frame_bury -3 // storage key//metadata

	// contracts/algo-did.algo.ts:148
	// assert(metadata.status === DELETING)
	frame_dig -3 // storage key//metadata
	box_get
	assert
	extract 16 1
	byte 0x0000000000000002
	b==
	assert

	// contracts/algo-did.algo.ts:149
	// assert(metadata.start <= boxIndex && boxIndex <= metadata.end)
	frame_dig -3 // storage key//metadata
	box_get
	assert
	extract 0 8
	btoi
	frame_dig -2 // boxIndex: uint64
	<=
	dup
	bz skip_and1
	frame_dig -2 // boxIndex: uint64
	frame_dig -3 // storage key//metadata
	box_get
	assert
	extract 8 8
	btoi
	<=
	&&

skip_and1:
	assert

	// if1_condition
	// contracts/algo-did.algo.ts:151
	// boxIndex !== metadata.start
	frame_dig -2 // boxIndex: uint64
	frame_dig -3 // storage key//metadata
	box_get
	assert
	extract 0 8
	btoi
	!=
	bz if1_end

	// if1_consequent
	// contracts/algo-did.algo.ts:151
	// assert(metadata.lastDeleted === boxIndex - 1)
	frame_dig -3 // storage key//metadata
	box_get
	assert
	extract 25 8
	btoi
	frame_dig -2 // boxIndex: uint64
	int 1
	-
	==
	assert

if1_end:
	// contracts/algo-did.algo.ts:153
	// preMBR = globals.currentApplicationAddress.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	frame_bury -4 // preMBR: uint64

	// contracts/algo-did.algo.ts:155
	// this.dataBoxes(boxIndex).delete()
	frame_dig -2 // boxIndex: uint64
	itob
	box_del

	// if2_condition
	// contracts/algo-did.algo.ts:157
	// boxIndex === metadata.end
	frame_dig -2 // boxIndex: uint64
	frame_dig -3 // storage key//metadata
	box_get
	assert
	extract 8 8
	btoi
	==
	bz if2_else

	// if2_consequent
	// contracts/algo-did.algo.ts:157
	// this.metadata(pubKey).delete()
	frame_dig -1 // pubKey: address
	box_del
	b if2_end

if2_else:
	// contracts/algo-did.algo.ts:158
	// metadata.lastDeleted = boxIndex
	frame_dig -3 // storage key//metadata
	box_get
	assert
	frame_dig -2 // boxIndex: uint64
	itob
	replace2 25
	frame_dig -3 // storage key//metadata
	swap
	box_put

if2_end:
	// contracts/algo-did.algo.ts:160
	// sendPayment({
	//       amount: preMBR - globals.currentApplicationAddress.minBalance,
	//       receiver: this.txn.sender,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/algo-did.algo.ts:161
	// amount: preMBR - globals.currentApplicationAddress.minBalance
	frame_dig -4 // preMBR: uint64
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	assert
	-
	itxn_field Amount

	// contracts/algo-did.algo.ts:162
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateApplication()void
//
// Allow the contract to be updated by the creator
abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	int 1
	return

updateApplication:
	proto 0 0

	// contracts/algo-did.algo.ts:170
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert
	retsub

// dummy()void
//
// Dummy function to add extra box references for deleteData.
// Boxes are 32k, but a single app call can only inlcude enough references to read/write 8k
// at a time. Thus when a box is deleted, we need to add additional dummy calls with box
// references to increase the total read/write budget to 32k.
abi_route_dummy:
	// execute dummy()void
	callsub dummy
	int 1
	return

dummy:
	proto 0 0
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "startUpload(address,uint64,uint64,pay)void"
	method "upload(address,uint64,uint64,byte[])void"
	method "finishUpload(address)void"
	method "startDelete(address)void"
	method "deleteData(address,uint64)void"
	method "dummy()void"
	txna ApplicationArgs 0
	match abi_route_startUpload abi_route_upload abi_route_finishUpload abi_route_startDelete abi_route_deleteData abi_route_dummy
	err

call_UpdateApplication:
	method "updateApplication()void"
	txna ApplicationArgs 0
	match abi_route_updateApplication
	err