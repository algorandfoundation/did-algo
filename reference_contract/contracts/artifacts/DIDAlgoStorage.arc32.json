{
  "hints": {
    "startUpload(address,uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "upload(address,uint64,uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "finishUpload(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "startDelete(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteData(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "dummy()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "currentIndex": {
          "type": "uint64",
          "key": "currentIndex"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "DIDAlgoStorage",
    "desc": "",
    "methods": [
      {
        "name": "startUpload",
        "desc": "Allocate boxes to begin data upload process",
        "args": [
          {
            "name": "pubKey",
            "type": "address",
            "desc": "The pubkey of the DID"
          },
          {
            "name": "numBoxes",
            "type": "uint64",
            "desc": "The number of boxes that the data will take up"
          },
          {
            "name": "endBoxSize",
            "type": "uint64",
            "desc": "The size of the last box"
          },
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": "Payment from the uploader to cover the box MBR"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "upload",
        "desc": "Upload data to a specific offset in a box",
        "args": [
          {
            "name": "pubKey",
            "type": "address",
            "desc": "The pubkey of the DID"
          },
          {
            "name": "boxIndex",
            "type": "uint64",
            "desc": "The index of the box to upload the given chunk of data to"
          },
          {
            "name": "offset",
            "type": "uint64",
            "desc": "The offset within the box to start writing the data"
          },
          {
            "name": "data",
            "type": "byte[]",
            "desc": "The data to write"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "finishUpload",
        "desc": "Mark uploading as false",
        "args": [
          {
            "name": "pubKey",
            "type": "address",
            "desc": "The address of the DID"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "startDelete",
        "desc": "Starts the deletion process for the data associated with a DID",
        "args": [
          {
            "name": "pubKey",
            "type": "address",
            "desc": "The address of the DID"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteData",
        "desc": "Deletes a box of data",
        "args": [
          {
            "name": "pubKey",
            "type": "address",
            "desc": "The address of the DID"
          },
          {
            "name": "boxIndex",
            "type": "uint64",
            "desc": "The index of the box to delete"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "desc": "Allow the contract to be updated by the creator",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "dummy",
        "desc": "Dummy function to add extra box references for deleteData.Boxes are 32k, but a single app call can only inlcude enough references to read/write 8kat a time. Thus when a box is deleted, we need to add additional dummy calls with boxreferences to increase the total read/write budget to 32k.",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}